Metadata-Version: 2.1
Name: regiaoSul
Version: 0.0.1
Summary: UNKNOWN
Home-page: https://github.com/ebaustria/regiaoSul
Author: Eric Bush
Author-email: ericbushmerp@gmail.com
License: UNKNOWN
Description: # regiaoSul
        files for long distance simulation of The-ONE
        
        Steps for creating a deck.gl visualization:
        
        1. Clone this repository.
        
        2. Clone the repository located at https://github.com/ebaustria/deck.gl.git.
        
        3. Clone the repository located at https://github.com/ebaustria/the-one.git.
        
        4. Navigate to the-one in the terminal, switch to the branch called ```longDistance``` and open ```the-one/default_settings.txt```. Scroll down to line 105 and make sure ```Report.report1``` is set to ```LocalCoordinatesReport```.
        
        5. While in the-one, compile the code using ```./compile.sh``` and run the simulation with ```./one.sh regiaoSul_settings.txt```. If you are using Java 11, you will need to compile the program with ```./compileJava11.sh```. ```the-one/README.txt``` or ```the-one/README.md``` can be consulted for more information on compiling and running the ONE, if necessary. It may be necessary to remove the flight recorder in order to run the simulation. If this is the case, open ```the-one/one.sh``` and remove ```-XX:+FlightRecorder  -XX:StartFlightRecording=duration=60s,filename=myrecording.jfr ``` from the file. Afterwards, it should work. When the simulation is finished, it will write a report. Each line of the report has the following form: vehicle name, local coordinates, timestamp. The vehicle name is the name of the vehicle in question, the local coordinates are a pair of coordinates used in the ONE, and the timestamp is the simulation time at which the vehicle is located at the local coordinates in question.
        
        6. Navigate to ```the-one/reports```. Find the report mentioned in the previous step. It should be the most recent report and its name should end with ```LocalCoordinatesReport.txt```. If it is your first time running the simulation, it should be the only file in ```the-one/reports```. Rename the report as ```local_coordinates_brazil.txt```. Move this file to the ```regiaoSul``` repository.
        
        7. Navigate to ```the-one/data/regiaoSul```. Find ```stations.wkt``` and ```cities.wkt``` and copy them to the ```regiaoSul``` repository. Do not change the name of either file. Navigate to ```regiaoSul``` in the terminal or open it in an IDE.
        
        8. Run ```readMap.py```. On line 136 of ```readMap.py```, this will write a file called ```gps_coordinates_brazil.csv```. ```gps_coordinates_brazil.csv``` is a mapping of the local coordinates of each node (used in the ONE and taken from ```local_coordinates_brazil.txt```) to that node's corresponding GPS coordinates. The GPS coordinates are needed for the deck visualization. Running ```readMap.py``` also writes a WKT linestring file for each route that consists of GPS coordinates. These files are written on line 132 within a for loop. The WKT linestring file names have the format ```route_name + _gps_nodes.wkt```.
        
        9. Run ```json_generator.py```. No command line arguments are needed. The first function call in ```json_generator.py``` reads ```local_coordinates_brazil.txt``` and ```gps_coordinates_brazil.csv```, parses the data in each file, and uses it to build a list of dictionaries that each contain a list of GPS coordinates and a list of corresponding timestamps for a vehicle. This list of dictionaries is then written to a JSON file called ```trips.json``` that can be used to visualize vehicle movement in deck.gl. The second function call in ```json_generator.py``` reads in each of the WKT linestring files, parses the data in them, and creates a list of dictionaries that each contain a route name, a color, and a list of the route's GPS coordinates in linestring form. This list is then written to a JSON file called ```routes_brazil.json``` that can be used to visualize the public transit lines in deck.gl. The third function call in ```json_generator.py``` reads ```stations.wkt``` and ```cities.wkt```, parses the data in each file, and builds a list of dictionaries that each contain a single pair of GPS coordinates. This list is then written to a JSON file called ```stops.json``` that can be used to visualize public transit stops in deck.gl. The third function call reads ```arrivals.txt``` (includes timestamps for when vehicles arrive at stops in the ONE) and ```gps_coordinates_brazil.csv```, parses the data in each file, and builds a list of dictionaries. Each dictionary contains a vehicle name, a set of coordinates, a single timestamp, and a color (RGB). The list is written to a file called ```arrivals.json```, which is used to visualize the arrivals of vehicles at public transit stops in deck.gl.
        
        10. Push the four JSON files to a remote GitHub repository.
        
        11. Open ```app.js```. Its path should be ```deck.gl/examples/website/trips/app.js```. Open the raw data for each JSON file in the remote GitHub repository from the previous step and copy each raw data URL to the ```DATA_URL``` constant in ```app.js```. The properties of each layer will also need to be included in the ```renderLayers()``` function in ```app.js```. The current version of ```app.js``` is located in the ```regiaoSul``` repository and can be consulted for an example. https://deck.gl/docs/api-reference/layers can also be consulted for more information on deck.gl's layers and their properties. If you would like to do an easier version of this step, you should be able to navigate to ```deck.gl/examples/website/trips``` and replace the version of ```app.js``` that is located there with the version of ```app.js``` that is located in ```regiaoSul```.
        
        12. Navigate to ```deck.gl/examples/website/trips``` in the terminal, install the dependencies using ```npm install``` and run the visualization using ```npm start```. https://deck.gl/docs can be consulted for more information, if necessary.
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
